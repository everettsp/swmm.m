classdef envelope < handle
    % Violin creates violin plots for some data
    %   A violin plot is an easy to read substitute for a box plot
    %   that replaces the box shape with a kernel density estimate of
    %   the data, and optionally overlays the data points itself.
    %
    %   Additional constructor parameters include the width of the
    %   plot, the bandwidth of the kernel density estimation, and the
    %   X-axis position of the violin plot.
    %
    %   Use <a href="matlab:help('violinplot')">violinplot</a> for a
    %   <a href="matlab:help('boxplot')">boxplot</a>-like wrapper for
    %   interactive plotting.
    %
    %   See for more information on Violin Plots:
    %   J. L. Hintze and R. D. Nelson, "Violin plots: a box
    %   plot-density trace synergism," The American Statistician, vol.
    %   52, no. 2, pp. 181-184, 1998.
    %
    % Violin Properties:
    %    ViolinColor - Fill color of the violin area and data points.
    %                  Defaults to the next default color cycle.
    %    ViolinAlpha - Transparency of the ciolin area and data points.
    %                  Defaults to 0.3.
    %    EdgeColor   - Color of the violin area outline.
    %                  Defaults to [0.5 0.5 0.5]
    %    BoxColor    - Color of the box, whiskers, and the outlines of
    %                  the median point and the notch indicators.
    %                  Defaults to [0.5 0.5 0.5]
    %    MedianColor - Fill color of the median and notch indicators.
    %                  Defaults to [1 1 1]
    %    ShowData    - Whether to show data points.
    %                  Defaults to true
    %    ShowNotches - Whether to show notch indicators.
    %                  Defaults to false
    %    ShowMean    - Whether to show mean indicator.
    %                  Defaults to false
    %
    % Violin Children:
    %    ScatterPlot - <a href="matlab:help('scatter')">scatter</a> plot of the data points
    %    ViolinPlot  - <a href="matlab:help('fill')">fill</a> plot of the kernel density estimate
    %    BoxPlot     - <a href="matlab:help('fill')">fill</a> plot of the box between the quartiles
    %    WhiskerPlot - line <a href="matlab:help('plot')">plot</a> between the whisker ends
    %    MedianPlot  - <a href="matlab:help('scatter')">scatter</a> plot of the median (one point)
    %    NotchPlots  - <a href="matlab:help('scatter')">scatter</a> plots for the notch indicators
    %    MeanPlot    - line <a href="matlab:help('plot')">plot</a> at mean value
    
    % Copyright (c) 2016, Bastian Bechtold
    % This code is released under the terms of the BSD 3-clause license
    
    properties
        MedPlot % scatter plot of the data points
        EnvelopePlots  % fill plot of the kernel density estimate
        OutlierPlot     % fill plot of the box between the quartiles
        MeanPlot
        Percentile
    end
    
    properties (Dependent=true)
        MeanColor
        EnvelopeColor    % whether to show data points
        EnvelopeAlpha
        LineWidth
        EdgeAlpha
        DisplayName
        ShowMean % whether to show notch indicators
        ShowMedian
        ShowOutliers    % whether to show mean indicator
    end
    
    methods
        function obj = envelope(data, domain, varargin)
            %Violin plots a violin plot of some data at pos
            %   VIOLIN(DATA, POS) plots a violin at x-position POS for
            %   a vector of DATA points.
            %
            %   VIOLIN(..., 'PARAM1', val1, 'PARAM2', val2, ...)
            %   specifies optional name/value pairs:
            %     'Width'        Width of the violin in axis space.
            %                    Defaults to 0.3
            %     'Bandwidth'    Bandwidth of the kernel density
            %                    estimate. Should be between 10% and
            %                    40% of the data range.
            %     'ViolinColor'  Fill color of the violin area and
            %                    data points. Defaults to the next
            %                    default color cycle.
            %     'ViolinAlpha'  Transparency of the violin area and
            %                    data points. Defaults to 0.3.
            %     'EdgeColor'    Color of the violin area outline.
            %                    Defaults to [0.5 0.5 0.5]
            %     'BoxColor'     Color of the box, whiskers, and the
            %                    outlines of the median point and the
            %                    notch indicators. Defaults to
            %                    [0.5 0.5 0.5]
            %     'MedianColor'  Fill color of the median and notch
            %                    indicators. Defaults to [1 1 1]
            %     'ShowData'     Whether to show data points.
            %                    Defaults to true
            %     'ShowNotches'  Whether to show notch indicators.
            %                    Defaults to false
            %     'ShowMean'     Whether to show mean indicator.
            %                    Defaults to false
            
            args = obj.check_inputs(data, domain, varargin{:});
            
            obj.Percentile = args.Percentile;
            Percentile = obj.Percentile;
            
            hold('on');
            

            data_bounds = prctile(data,[Percentile,100-Percentile],2);
            
            % find the discontinuities in the data
            data_starts = find(~any(isnan(data),2) & any(isnan([nan(1,size(data,2));data(1:end-1,:)]),2)); %lag down
            data_ends = find(~any(isnan(data),2) & any(isnan([data(2:end,:);nan(1,size(data,2))]),2)); %shit up
            
            % edge conditions
            if data_ends(1) < data_starts(1)
                data_starts = [1 data_starts];
            end
            
            if data_starts(end) > data_starts(end)
                data_ends = [data_ends height(tt)];
            end
            
            % plot continuous segments
            for i2 = 1:numel(data_starts)
                idx = data_starts(i2):data_ends(i2);
                
                obj.EnvelopePlots{i2} = fill([domain(idx); flipud(domain(idx))],...
                    [data_bounds(idx,1); flipud(data_bounds(idx,2))],...
                    [0.5, 0.5, 0.5]);
                
                
            end
            
            obj.MedPlot = plot(domain,median(data,2));
            colr = obj.EnvelopeColor;
            
            obj.MeanPlot = plot(domain,mean(data,2));
            
            k2 = 1;
            outliers = [];
            for i2 = 1:size(data,1)
                ldx_outliers = isoutlier(data(i2,:));
                idx_outliers = find(ldx_outliers);
                if ~isempty(idx_outliers)
                    for i3 = 1:nnz(ldx_outliers)
                        outliers(k2,:) = [domain(i2), data(i2,idx_outliers(i3))];
                        k2 = k2 + 1;
                    end
                end
            end
            
            if ~isempty(outliers)
                obj.OutlierPlot = plot(outliers(:,1),outliers(:,2),'o','LineWidth',2,'MarkerSize',4);
            else
                obj.OutlierPlot = plot([]);
            end
            
            if not(isempty(args.EnvelopeColor))
                obj.EnvelopeColor = args.EnvelopeColor;
            else
                obj.EnvelopeColor = obj.MedPlot.Color;
            end
            
            obj.MeanColor = args.MeanColor;
            obj.EnvelopeAlpha = args.EnvelopeAlpha;
            obj.EdgeAlpha = args.EdgeAlpha;
            obj.DisplayName = args.DisplayName;
            obj.LineWidth = args.LineWidth;
            
            obj.ShowOutliers = args.ShowOutliers;
            obj.ShowMean = args.ShowMean;
            obj.ShowMedian = args.ShowMedian;
            
            
            if not(isempty(args.EnvelopeColor))
                obj.EnvelopeColor = args.EnvelopeColor;
            else
                obj.EnvelopeColor = obj.MedPlot.Color;
            end
            
            for i2 = 1:numel(obj.EnvelopePlots)
                if i2 ~= 1
                    obj.EnvelopePlots{i2}.HandleVisibility = 'off';
                end
            end
            
        end
        
        function set.EnvelopeColor(obj, EnvelopeColor)
            if ~isempty(obj.MedPlot)
                obj.MedPlot.Color = EnvelopeColor;
                obj.MedPlot.MarkerEdgeColor = EnvelopeColor;
                obj.MedPlot.MarkerFaceColor = EnvelopeColor;
                for i2 = 1:numel(obj.EnvelopePlots)
                    obj.EnvelopePlots{i2}.FaceColor = EnvelopeColor;
                    obj.EnvelopePlots{i2}.EdgeColor = EnvelopeColor;
                end
            end
        end
        
        function EnvelopeColor = get.EnvelopeColor(obj)
            EnvelopeColor = obj.MedPlot.Color;
        end
        
        function set.MeanColor(obj, EnvelopeColor)
            obj.MeanPlot.Color = EnvelopeColor;
            obj.MeanPlot.MarkerFaceColor = EnvelopeColor;
            obj.MeanPlot.MarkerEdgeColor = EnvelopeColor;
            if ~isempty(obj.OutlierPlot)
                obj.OutlierPlot.Color = EnvelopeColor;
                obj.OutlierPlot.MarkerFaceColor = EnvelopeColor;
            end
        end
        
        function MeanColor = get.MeanColor(obj)
            if ~isempty(obj.MedPlot)
                MeanColor = obj.MeanPlot.Color;
%             elseif ~isempty(obj.MeanPlot)
%                 MeanColor = obj.MedPlot.Color;
            end
        end

        
        function set.Percentile(obj, Percentile)
            obj.Percentile = Percentile;
        end
        
        function Percentile = get.Percentile(obj)
            Percentile = obj.Percentile;
        end
        
        
        function set.DisplayName(obj, DisplayName)
            obj.MeanPlot.DisplayName = [DisplayName,' mean'];
            obj.MedPlot.DisplayName = [DisplayName,' median'];
            
            if ~isempty(obj.OutlierPlot)
                obj.OutlierPlot.DisplayName = [DisplayName,' outliers'];
            end
            
            for i2 = 1:numel(obj.EnvelopePlots)
                obj.EnvelopePlots{i2}.DisplayName = [DisplayName,' ',num2str(obj.Percentile),'% confidence'];
            end
        end
        
%         function DisplayName = get.DisplayName(obj)
%             
%         end
        
        function set.LineWidth(obj, LineWidth)
            obj.MeanPlot.LineWidth = LineWidth;
            obj.MedPlot.LineWidth = LineWidth;
            for i2 = 1:numel(obj.EnvelopePlots)
                obj.EnvelopePlots{i2}.EdgeAlpha = 0;
            end
        end
        
        function LineWidth = get.LineWidth(obj)
            LineWidth = obj.MeanPlot.LineWidth;
        end
        
        function set.EnvelopeAlpha(obj, EnvelopeAlpha)
            for i2 = 1:numel(obj.EnvelopePlots)
                obj.EnvelopePlots{i2}.FaceAlpha = EnvelopeAlpha;
            end
        end
        
        function EnvelopeAlpha = get.EnvelopeAlpha(obj)
            EnvelopeAlpha = obj.EnvelopePlots(1).FaceAlpha;
        end
        
                
        function set.EdgeAlpha(obj, EdgeAlpha)
            for i2 = 1:numel(obj.EnvelopePlots)
                obj.EnvelopePlots{i2}.EdgeAlpha = EdgeAlpha;
            end
        end
        
        function EdgeAlpha = get.EdgeAlpha(obj)
            EdgeAlpha = obj.EnvelopePlots(1).EdgeAlpha;
        end

%         
%         function set.OutlierColor(obj, OutlierColor)
%             obj.OutlierPlot.Color = OutlierColor;
%         end
%         
%         function OutlierColor = get.OutlierColor(obj)
%             OutlierColor = obj.OutlierPlot.Color;
%         end
        
        
        function set.ShowMean(obj, yesno)
            if yesno
                obj.MeanPlot.Visible = 'on';
            else
                obj.MeanPlot.Visible = 'off';
                obj.MeanPlot.HandleVisibility = 'off';
            end
        end
        
        function yesno = get.ShowMean(obj)
            if ~isempty(obj.MeanPlot)
                yesno = strcmp(obj.MeanPlot.Visible, 'on');
            end
        end
        
        function set.ShowMedian(obj, yesno)
            if yesno
                obj.MedPlot.Visible = 'on';
            else
                obj.MedPlot.Visible = 'off';
                obj.MedPlot.HandleVisibility = 'off';
            end
        end
        
        function yesno = get.ShowMedian(obj)
            if ~isempty(obj.MedPlot)
                yesno = strcmp(obj.MedPlot.Visible, 'on');
            end
        end
        
        function set.ShowOutliers(obj, yesno)
            if ~isempty(obj.OutlierPlot)
                if yesno
                    obj.OutlierPlot.Visible = 'on';
                else
                    obj.OutlierPlot.Visible = 'off';
                    obj.OutlierPlot.HandleVisibility = 'off';
                end
            end
        end
        
        function yesno = get.ShowOutliers(obj)
            if ~isempty(obj.OutlierPlot)
                yesno = strcmp(obj.OutlierPlot.Visible, 'on');
            end
        end
    end
    
    methods (Access=private)
        function results = check_inputs(obj, data, domain, varargin)
            isscalarnumeric = @(x) (isnumeric(x) & isscalar(x));
            isscalarabove50 = @(x) (isscalarnumeric(x) & x > 50);
            p = inputParser();
            p.addRequired('Data', @isnumeric);
            isdomain = @(x) (isdatetime(x) | isnumeric(x));
            p.addRequired('Domain', isdomain);
            p.addParameter('Percentile', 75, isscalarabove50);
            p.addParameter('DisplayName', 'okokok', @ischar);
            iscolor = @(x) (isnumeric(x) & length(x) == 3);
            p.addParameter('EnvelopeColor', [], iscolor);
            p.addParameter('MeanColor', [.5 .2 .1], iscolor);
            p.addParameter('LineWidth',1.5, isscalarnumeric)
            isalpha = @(x) (isnumeric(x) & isscalar(x) & x <= 1);
            p.addParameter('EnvelopeAlpha', 0.2, isalpha);
            p.addParameter('EdgeAlpha', 0, isalpha);
            isscalarlogical = @(x) (islogical(x) & isscalar(x));
            p.addParameter('ShowOutliers', false, isscalarlogical);
            p.addParameter('ShowMean', false, isscalarlogical);
            p.addParameter('ShowMedian', true, isscalarlogical);
            p.parse(data, domain, varargin{:});
            results = p.Results;
        end
    end
end
